repositories {
    mavenCentral()
}

apply plugin: 'com.android.application'
apply plugin: 'android-soexcluder'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jween.gradle:android-soexcluder:1.1'
        // Use Realm Database
        classpath "io.realm:realm-gradle-plugin:5.12.0"
    }
}

android {
    compileSdkVersion 28

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        // use the version code
        versionCode rootProject.ext.versionCodeProp
        versionName rootProject.ext.versionNameProp

        // Use Vector drawables
        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters "armeabi-v7a", "x86", 'arm64-v8a', 'x86_64'
        }

        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(project.hasProperty("RELEASE_STORE_FILE") ? RELEASE_STORE_FILE : "/dummy/path")
            storePassword project.hasProperty("RELEASE_STORE_PASSWORD") ? RELEASE_STORE_PASSWORD : "dummy password"
            keyAlias project.hasProperty("RELEASE_KEY_ALIAS") ? RELEASE_KEY_ALIAS : "dummy alias"
            keyPassword project.hasProperty("RELEASE_KEY_PASSWORD") ? RELEASE_KEY_PASSWORD : "dummy password"
        }
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "2g"
    }

    buildTypes {
        debug {
            resValue "string", "git_revision", "\"${gitRevision()}\""
            resValue "string", "git_revision_date", "\"${gitRevisionDate()}\""
            resValue "string", "git_branch_name", "\"${gitBranchName()}\""
            resValue "string", "build_number", rootProject.ext.buildNumberProp
            minifyEnabled false
        }

        release {
            resValue "string", "git_revision", "\"${gitRevision()}\""
            resValue "string", "git_revision_date", "\"${gitRevisionDate()}\""
            resValue "string", "git_branch_name", "\"${gitBranchName()}\""
            resValue "string", "build_number", rootProject.ext.buildNumberProp
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        matrixorg.initWith(buildTypes.release)
        matrixorg {
            signingConfig signingConfigs.release

            // When building with source of the SDK, there is no buildType 'matrixorg' in the SDK so fallback to 'release'
            matchingFallbacks = ['release']
        }
    }

    // The 'base' dimension permits to deal with GooglePlay/Fdroid app
    // The 'target' dimension permits to specify which platform are used
    // The 'voip' flavor dimension permits to include/exclude jitsi at compilation time
    // The 'pinning' flavor dimension permits to enable/disable certificate pinning with fingerprint check
    flavorDimensions "base", "target", "voip", "pinning"

    productFlavors {
        app {
            // use the version name
            versionCode rootProject.ext.versionCodeProp
            buildConfigField "boolean", "ALLOW_FCM_USE", "true"
            buildConfigField "String", "SHORT_FLAVOR_DESCRIPTION", "\"G\""
            buildConfigField "String", "FLAVOR_DESCRIPTION", "\"GooglePlay\""
            dimension "base"
        }

        appfdroid {
            // use the version name
            versionCode rootProject.ext.versionCodeProp
            buildConfigField "boolean", "ALLOW_FCM_USE", "false"
            buildConfigField "String", "SHORT_FLAVOR_DESCRIPTION", "\"F\""
            buildConfigField "String", "FLAVOR_DESCRIPTION", "\"FDroid\""
            dimension "base"
        }

        withvoip {
            dimension "voip"
        }

        withoutvoip {
            dimension "voip"
        }

        withpinning {
            dimension "pinning"
        }

        withoutpinning {
            dimension "pinning"
        }

        // Note: we cannot use reserved word protected, so typo the word
        protecteed {
            dimension "target"

            applicationId "fr.gouv.tchap"
            versionName rootProject.ext.versionNameProp

            buildConfigField "String", "DEFAULT_PUSHER_APP_ID", "\"fr.gouv.tchap.android\""
        }

        preprod {
            dimension "target"

            applicationId "fr.gouv.rie.tchap"
            versionName rootProject.ext.versionNameProp + "_b"

            buildConfigField "String", "DEFAULT_PUSHER_APP_ID", "\"fr.gouv.rie.tchap.android\""
        }

        agent {
            dimension "target"

            applicationId "fr.gouv.tchap.a"
            versionName rootProject.ext.versionNameProp + "_a"

            buildConfigField "String", "DEFAULT_PUSHER_APP_ID", "\"fr.gouv.tchap.a.android\""
        }
    }

    soexcluder {
        withoutvoip {
            exclude "lib/*/libjingle_peerconnection_so.so"
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    repositories {
        flatDir {
            dir 'libs'
        }

        maven {
            url "https://s3.amazonaws.com/repo.commonsware.com"
        }

        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
}

static def gitRevision() {
    def cmd = "git rev-parse --short HEAD"
    return cmd.execute().text.trim()
}

static def gitRevisionDate() {
    def cmd = "git show -s --format=%ci HEAD^{commit}"
    return cmd.execute().text.trim()
}

static def gitBranchName() {
    def cmd = "git name-rev --name-only HEAD"
    return cmd.execute().text.trim()
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Kotlin KTX
    implementation 'androidx.core:core-ktx:1.0.2'

    // Kotlin coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation "org.jetbrains.anko:anko-commons:0.10.8"

    // Note: do not upgrade to 1.0.3 because it lead to crashes at startup on Android 16
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'me.leolin:ShortcutBadger:1.1.2@aar'

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'com.jakewharton:butterknife:10.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt 'com.jakewharton:butterknife-compiler:10.1.0'

    // UI
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.binaryfork:spanny:1.0.4'
    implementation 'com.github.chrisbanes:PhotoView:2.1.4'

    // Network
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    implementation 'com.squareup.okio:okio:1.13.0'

    // Use Glide library to display image (Gif supported)
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'

    implementation 'com.googlecode.libphonenumber:libphonenumber:8.9.12'

    /************* Matrix SDK management **************/
    // update settings.gradle
    // use the matrix SDK as external libs
    implementation(name: 'matrix-sdk', ext: 'aar')
    implementation(name: 'matrix-sdk-core', ext: 'aar')
    implementation(name: 'matrix-sdk-crypto', ext: 'aar')
    implementation(name: 'olm-sdk', ext: 'aar')
    // use the matrix SDK as external dependency
    //implementation 'com.github.matrix-org:matrix-android-sdk:v0.9.23'
    // use the matrix SDK as a sub project
    // you have to uncomment some lines in settings.gradle
    //implementation project(':matrix-sdk')
    //implementation project(':matrix-sdk-crypto')
    //implementation project(':matrix-sdk-core')

    /************* jitsi **************/
    withvoipImplementation('org.jitsi.react:jitsi-meet-sdk:2.2.2@aar')

    // another tracking than GA
    implementation 'org.piwik.sdk:piwik-sdk:2.0.0'

    /************* flavors management **************/

    // app flavor only
    appImplementation('com.google.firebase:firebase-messaging:17.4.0') {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    // fdroid flavor only

    // Test
    testImplementation 'junit:junit:4.12'
}


if (!getGradle().getStartParameter().getTaskRequests().toString().contains("fdroid")) {
    apply plugin: 'com.google.gms.google-services'
}
